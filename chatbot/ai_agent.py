import os
from datetime import datetime
from zoneinfo import ZoneInfo
import asyncio
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.tools import tool
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import AIMessage, HumanMessage
from .tool_agent import get_data_weather_climate_uv, get_name_disease, get_data_from_vector_database
from dotenv import load_dotenv, find_dotenv
from core.redis_client import get_redis_data, get_redis_cache_conn, get_redis_history_conn
import json
import traceback
import google.api_core.exceptions
from backend.storage_history_message import append_chat_history
from langchain.schema import SystemMessage
import redis.asyncio as redis
import time
from redis.exceptions import ResponseError, ConnectionError, TimeoutError


load_dotenv('/Users/macbook/Desktop/BangA_DSC2025/.env')
QUEUE_CHATBOT = os.getenv("QUEUE_CHATBOT", "queue_chatbot")
# Kh·ªüi t·∫°o m·ªôt danh s√°ch ƒë·ªÉ ch·ª©a t·∫•t c·∫£ API key t·ª´ file .env
GEMINI_API_KEYS = []
for i in range(12):  # Duy·ªát t·ª´ 0 ƒë·∫øn 11
    key = os.environ.get(f"API_GEMINI_{i}")
    if key:
        GEMINI_API_KEYS.append(key)
    else:
        # D·ª´ng l·∫°i n·∫øu kh√¥ng t√¨m th·∫•y key ti·∫øp theo
        break

# Kh·ªüi t·∫°o m·ªôt ch·ªâ m·ª•c to√†n c·ª•c ƒë·ªÉ xoay v√≤ng c√°c key
key_index = 0
key_lock = asyncio.Lock()

async def get_next_key() -> str:
    """
    H√†m b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ l·∫•y API key ti·∫øp theo trong danh s√°ch.
    S·ª≠ d·ª•ng lock ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n khi ch·∫°y ƒëa lu·ªìng.
    """
    global key_index
    async with key_lock:
        key = GEMINI_API_KEYS[key_index]
        key_index = (key_index + 1) % len(GEMINI_API_KEYS)
        return key

# tool l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt, climate, uv
@tool
async def get_weather_report(dates: list[dict], city_id: int):
    """
    Truy v·∫•n c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ l·∫•y v√† di·ªÖn gi·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt cho c√°c ng√†y v√† th√†nh ph·ªë c·ª• th·ªÉ.
    D√πng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ th·ªùi ti·∫øt, ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠, ho·∫∑c ch·ªâ s·ªë UV.

    Args:
        dates (list[dict]): Danh s√°ch c√°c t·ª´ ƒëi·ªÉn, m·ªói t·ª´ ƒëi·ªÉn bi·ªÉu di·ªÖn m·ªôt ng√†y.
                            M·ªói t·ª´ ƒëi·ªÉn ph·∫£i c√≥ c√°c kh√≥a sau:
                            - 'day' (int): Ng√†y trong th√°ng (v√≠ d·ª•: 17).
                            - 'month' (int): Th√°ng trong nƒÉm (v√≠ d·ª•: 9).
                            - 'year' (int): NƒÉm (v√≠ d·ª•: 2025).
        city_id (int): ID c·ªßa th√†nh ph·ªë ƒë·ªÉ l·∫•y d·ªØ li·ªáu.
    """
    print(f"\n--- C√¥ng c·ª• 'get_weather_report' ƒë∆∞·ª£c g·ªçi v·ªõi c√°c ng√†y: {dates} v√† city_id: {city_id} ---")
    
    reports = []
    for date_data in dates:
        day = date_data['day']
        month = date_data['month']
        year = date_data['year']
        
        # H√†m get_data_weather_climate_uv b√¢y gi·ªù tr·∫£ v·ªÅ m·ªôt danh s√°ch c√°c chu·ªói
        daily_interpretations_list = await get_data_weather_climate_uv(day, month, year, city_id)
        
        if daily_interpretations_list:
            # üåü S·ª≠a l·ªói ·ªü ƒë√¢y: N·ªëi c√°c chu·ªói trong danh s√°ch l·∫°i
            daily_interpretation = "\n".join(daily_interpretations_list)
            reports.append(f"Ng√†y {day}/{month}/{year}:\n{daily_interpretation}")
        else:
            reports.append(f"Ng√†y {day}/{month}/{year}: Kh√¥ng c√≥ d·ªØ li·ªáu.")
            
    return reports

# tool l·∫•y d·ªØ li·ªáu b·ªánh l√Ω
@tool
async def get_user_disease_info(user_id: int):
    """
    Truy v·∫•n c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ b·ªánh l√Ω v√† t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa ng∆∞·ªùi d√πng.
    
    S·ª≠ d·ª•ng tool n√†y n·∫øu c·∫ßn bi·∫øt v·ªÅ th√¥ng tin b·ªánh l√Ω c·ªßa ng∆∞·ªùi d√πng. Tool n√†y tr·∫£ v·ªÅ t√™n b·ªánh v√† m√¥ t·∫£ t√¨nh tr·∫°ng s·ª©c kho·∫ª
    m√† ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p.

    Args:
        user_id (int): ID c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ truy v·∫•n th√¥ng tin.
    """
    response_text = await get_name_disease(user_id)
    if response_text is None: return "kh√¥ng c√≥ d·ªØ li·ªáu"
    return response_text

@tool
async def retrieve_health_guideline(query_question: str, disease_name: str):
    """
    Truy v·∫•n c∆° s·ªü d·ªØ li·ªáu vector ƒë·ªÉ t√¨m ki·∫øm c√°c t√†i li·ªáu h·ªçc thu·∫≠t chi ti·∫øt
    v·ªÅ m·ªëi li√™n h·ªá gi·ªØa c√°c y·∫øu t·ªë m√¥i tr∆∞·ªùng (th·ªùi ti·∫øt, kh√≠ h·∫≠u, UV) v√† b·ªánh l√Ω c·ªßa ng∆∞·ªùi d√πng.
    
    S·ª≠ d·ª•ng tool n√†y khi ng∆∞·ªùi d√πng h·ªèi c√°c c√¢u h·ªèi chi ti·∫øt v·ªÅ m·ªëi quan h·ªá gi·ªØa
    th·ªùi ti·∫øt ho·∫∑c kh√≠ h·∫≠u v√† m·ªôt b·ªánh c·ª• th·ªÉ. V√≠ d·ª•: "L√†m th·∫ø n√†o ƒë·ªÉ ph√≤ng tr√°nh t√°c ƒë·ªông c·ªßa tia UV
    ƒë·ªëi v·ªõi b·ªánh d·ªã ·ª©ng?", ho·∫∑c "Kh√¥ng kh√≠ √¥ nhi·ªÖm c√≥ l√†m tr·∫ßm tr·ªçng th√™m
    b·ªánh hen suy·ªÖn kh√¥ng?".
    Args:
        query_question (str): C√¢u h·ªèi chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng c·∫ßn ƒë∆∞·ª£c truy v·∫•n.
        disease_name (str): T√™n b·ªánh c·ªßa ng∆∞·ªùi d√πng ƒë∆∞·ª£c l·∫•y t·ª´ tool "get_user_disease_info". 
        V√¨ n√≥ ch√≠nh l√† collection name c·∫ßn truy xu·∫•t
    """
    response_text = await get_data_from_vector_database(query_question, disease_name)
    if response_text is None: return "kh√¥ng c√≥ d·ªØ li·ªáu"
    return response_text

async def agent_process(city_id_from_fastapi: int, user_id_from_fastapi: int, input_from_user: str, history_context: str ):
    """Ch·∫°y v√≠ d·ª• minh h·ªça."""
    if not GEMINI_API_KEYS:
        raise ValueError("Kh√¥ng t√¨m th·∫•y GEMINI API keys n√†o trong file .env.")
    
    for _ in range(len(GEMINI_API_KEYS)):
        try:
            # L·∫•y ng√†y hi·ªán t·∫°i ·ªü m√∫i gi·ªù Vi·ªát Nam
            vietnam_timezone = ZoneInfo("Asia/Ho_Chi_Minh")
            now_vietnam = datetime.now(vietnam_timezone)
            current_date_str = now_vietnam.strftime("%Y-%m-%d")

            api_key = await get_next_key()
            # Kh·ªüi t·∫°o m√¥ h√¨nh Gemini v·ªõi LangChain
            llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", temperature=0, google_api_key=api_key)

            # ƒê·ªãnh nghƒ©a c√°c c√¥ng c·ª• m√† agent c√≥ th·ªÉ s·ª≠ d·ª•ng
            tools_list = [get_weather_report, get_user_disease_info, retrieve_health_guideline]

            # ƒê·ªãnh nghƒ©a prompt cho agent
            prompt = ChatPromptTemplate.from_messages([
                ("system", f"""B·∫°n l√† m·ªôt tr·ª£ l√Ω s·ª©c kh·ªèe v√† th·ªùi ti·∫øt th√¥ng minh.
                M·ª•c ti√™u c·ªßa b·∫°n l√† cung c·∫•p l·ªùi khuy√™n c√° nh√¢n h√≥a, d·ª±a tr√™n d·ªØ li·ªáu th·ªùi ti·∫øt, th√¥ng tin b·ªánh l√Ω v√† c√°c ki·∫øn th·ª©c tham kh·∫£o.
                H√£y lu√¥n tr·∫£ l·ªùi m·ªôt c√°ch h·ªØu √≠ch, d·ªÖ hi·ªÉu v√† chuy√™n nghi·ªáp b·∫±ng ng√¥n ng·ªØ *Ti·∫øng Vi·ªát*.
                H√¥m nay l√† {current_date_str}.
                Th√¥ng tin v·ªÅ th√†nh ph·ªë m·∫∑c ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c cung c·∫•p cho b·∫°n d∆∞·ªõi d·∫°ng 'city_id' v√† b·∫°n ph·∫£i s·ª≠ d·ª•ng n√≥ cho c√°c truy v·∫•n li√™n quan ƒë·∫øn th·ªùi ti·∫øt. 
                B·∫°n KH√îNG c·∫ßn ph·∫£i h·ªèi ng∆∞·ªùi d√πng v·ªÅ t√™n th√†nh ph·ªë c·ªßa h·ªç.
                B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c c√¥ng c·ª• sau ƒë·ªÉ thu th·∫≠p th√¥ng tin:
                - Tool 1: L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt, ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ v√† ch·ªâ s·ªë UV cho c√°c ng√†y c·ª• th·ªÉ.
                - Tool 2: L·∫•y th√¥ng tin v·ªÅ c√°c b·ªánh c·ªßa ng∆∞·ªùi d√πng.
                - Tool 3: L·∫•y th√¥ng tin t·ª´ c∆° s·ªü d·ªØ li·ªáu ki·∫øn th·ª©c ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ s·ª©c kh·ªèe.
                Khi tr·∫£ l·ªùi, h√£y t·ªïng h·ª£p th√¥ng tin t·ª´ t·∫•t c·∫£ c√°c c√¥ng c·ª• c·∫ßn thi·∫øt.
                V√≠ d·ª•: N·∫øu ng∆∞·ªùi d√πng h·ªèi Th·ªùi ti·∫øt ng√†y mai c√≥ ·∫£nh h∆∞·ªüng g√¨ ƒë·∫øn b·ªánh c·ªßa t√¥i kh√¥ng ?,
                b·∫°n c·∫ßn s·ª≠ d·ª•ng tool th·ªùi ti·∫øt v√† tool s·ª©c kh·ªèe ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß."""),
                ("placeholder", "{chat_history}"),
                ("human", "{input}"),
                ("placeholder", "{agent_scratchpad}")
            ])
            
            # T·∫°o agent c√≥ kh·∫£ nƒÉng g·ªçi c√¥ng c·ª•
            agent = create_tool_calling_agent(llm, tools_list, prompt)

            # T·∫°o agent executor ƒë·ªÉ ch·∫°y agent
            agent_executor = AgentExecutor(agent=agent, tools=tools_list, verbose=True)

            user_query = f"City_id c·ªßa t√¥i l√†: {city_id_from_fastapi}, v√† m√£ user_id c·ªßa t√¥i l√† {user_id_from_fastapi}. T√¥i mu·ªën h·ªèi b·∫°n " + input_from_user

            if history_context:  
                chat_history_for_agent = [SystemMessage(content=history_context)]
            else:
                chat_history_for_agent = []

            # G·ª≠i c√¢u h·ªèi ƒë·∫øn m√¥ h√¨nh th√¥ng qua agent
            response = await agent_executor.ainvoke({
                "input": user_query, 
                "chat_history": chat_history_for_agent,
            })
            
            agent_output = response["output"]
            return agent_output
            
        # Th√™m kh·ªëi `except` ƒë·ªÉ b·∫Øt l·ªói 503 (Service Unavailable)
        except google.api_core.exceptions.ServiceUnavailable as e:
            print(f"[RAG ERROR] API call failed with ServiceUnavailable error. This is a server-side issue. Retrying with a new key... {e}")
            await asyncio.sleep(2) # Ch·ªù l√¢u h∆°n m·ªôt ch√∫t
        # Gi·ªØ l·∫°i kh·ªëi `except` ƒë·ªÉ b·∫Øt l·ªói 429 (Too Many Requests)
        except google.api_core.exceptions.ResourceExhausted as e:
            print(f"[RAG ERROR] API call failed with ResourceExhausted error. Retrying with a new key... {e}")
            await asyncio.sleep(1)
        except Exception as e:
            print(f"[RAG ERROR] Failed to perform RAG for job: {e}")
            return
    
    # N·∫øu t·∫•t c·∫£ c√°c key ƒë·ªÅu b·ªã l·ªói, tr·∫£ v·ªÅ m·ªôt l·ªói cu·ªëi c√πng
    print('t·∫•t c·∫£ key ƒë√£ b·ªã rate limit ho·∫∑c server qu√° t·∫£i')
    return

# h√†m gi√∫p agent lu√¥n t·ªânh v√† ch·ªù job
PING_INTERVAL = 1800  # 30 ph√∫t ping Redis 1 l·∫ßn
async def worker_loop():
    global redis_data
    global redis_cache
    redis_data = await get_redis_data()
    redis_cache = await get_redis_cache_conn()
    print("[Chatbot_Agent] Started worker loop...")
    last_ping = time.time()
    while True:
        if time.time() - last_ping > PING_INTERVAL:
            try:
                pong1 = await redis_data.ping()
                pong2 = await redis_cache.ping()
                if pong1 is True and pong2 is True:
                    print("[Worker] Redis ping OK")
                else:
                    print("[Worker] Redis ping failed ‚Üí reconnecting")
                    redis_data = await get_redis_data()
                    redis_cache = await get_redis_cache_conn()
            except Exception as e:
                print(f"[Worker] Redis ping error: {e} ‚Üí reconnecting")
                redis_data = await get_redis_data()
                redis_cache = await get_redis_cache_conn()

            last_ping = time.time()
        
        try:
            if redis_data is None or redis_cache is None:
                redis_data = await get_redis_data()
                redis_cache = await get_redis_cache_conn()

            job_json = await redis_data.brpop(QUEUE_CHATBOT, timeout=5)
        except ResponseError as e:
            print(f"[Worker] BRPOP was force-unblocked, retrying... {e}")
            await asyncio.sleep(0.5)
            continue

        except (ConnectionError, TimeoutError) as e:
            print(f"[Worker] Redis connection lost: {e}. Reconnecting...")
            redis_data = None  # force reconnect
            traceback.print_exc()
            await asyncio.sleep(1)
            continue

        except Exception as e:
            print(f"[Worker] Unexpected error during BRPOP: {e}")
            traceback.print_exc()
            await asyncio.sleep(1)
            continue

        if job_json is None:
            continue

        _, job_str = job_json
        job_data = json.loads(job_str)
        request_id = job_data["request_id"]
        city_id = job_data["city_id"]
        user_id = job_data["user_id"]
        user_input = job_data["user_input"]
        summary_history = job_data["history_context"]
        try:
            agent_output = await agent_process(city_id, user_id, user_input, summary_history)
            if agent_output is None: agent_output = "Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi n√†y"
            # L∆∞u k·∫øt qu·∫£ v√†o Redis Cache (DB1) v·ªõi TTL
            # TTL (time-to-live) l√† 1800 gi√¢y (30 ph√∫t)
            TTL_SECONDS = 1800
            await redis_cache.setex(
                name=request_id, 
                time=TTL_SECONDS, 
                value=agent_output
            )
            print(f"[Chatbot_Agent] Ho√†n th√†nh job {request_id}. K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Redis cache v·ªõi TTL {TTL_SECONDS} gi√¢y.")
            # 2. Push bot response v√†o Redis history (DB2)
            redis_history = await get_redis_history_conn()
            await append_chat_history(user_id, "bot", agent_output, redis_history)
            print(f"[Chatbot_Agent] ƒê√£ l∆∞u v√†o redis history chat")

        except Exception as e:
            print(f"[Chatbot_Agent] Error in worker loop for job {request_id}: {e}")
            traceback.print_exc()
    
# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    try:
        asyncio.run(worker_loop())
    except KeyboardInterrupt:
        print("\n[Chatbot_Agent] Stopped by user (Ctrl+C)")

# python -m chatbot.ai_agent